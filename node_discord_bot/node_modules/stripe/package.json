{
  "_from": "stripe@7.15.0",
  "_id": "stripe@7.15.0",
  "_inBundle": false,
  "_integrity": "sha512-TmouNGv1rIU7cgw7iFKjdQueJSwYKdPRPBuO7eNjrRliZUnsf2bpJqYe+n6ByarUJr38KmhLheVUxDyRawByPQ==",
  "_location": "/stripe",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "stripe",
    "fetchSpec": "7.15.0",
    "name": "stripe",
    "raw": "stripe@7.15.0",
    "rawSpec": "7.15.0",
    "registry": true,
    "saveSpec": null,
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/stripe/-/stripe-7.15.0.tgz",
  "_shasum": "03593caec169b698997c091b07d21da701eeee18",
  "_shrinkwrap": null,
  "_spec": "stripe@7.15.0",
  "_where": "/home/vagrant/code/beastlybot/node_discord_bot",
  "author": {
    "email": "support@stripe.com",
    "name": "Stripe",
    "url": "https://stripe.com/"
  },
  "bugs": {
    "url": "https://github.com/stripe/stripe-node/issues"
  },
  "bugs:": "https://github.com/stripe/stripe-node/issues",
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Ask Bjørn Hansen",
      "email": "ask@develooper.com",
      "url": "http://www.askask.com/"
    },
    {
      "name": "Michelle Bu",
      "email": "michelle@stripe.com"
    },
    {
      "name": "Alex Sexton",
      "email": "alex@stripe.com"
    },
    {
      "name": "James Padolsey"
    }
  ],
  "dependencies": {
    "qs": "^6.6.0"
  },
  "deprecated": false,
  "description": "Stripe API wrapper",
  "devDependencies": {
    "chai": "~4.2.0",
    "chai-as-promised": "~7.1.1",
    "coveralls": "^3.0.0",
    "eslint": "^5.16.0",
    "eslint-config-prettier": "^4.1.0",
    "eslint-plugin-chai-friendly": "^0.4.0",
    "eslint-plugin-prettier": "^3.0.1",
    "mocha": "~6.1.4",
    "mocha-junit-reporter": "^1.23.1",
    "nock": "^10.0.6",
    "nyc": "^14.1.0",
    "prettier": "^1.16.4"
  },
  "engines": {
    "node": "^6 || ^8.1 || >=10.*"
  },
  "homepage": "https://github.com/stripe/stripe-node",
  "keywords": [
    "api",
    "credit cards",
    "payment processing",
    "stripe"
  ],
  "license": "MIT",
  "main": "lib/stripe.js",
  "name": "stripe",
  "optionalDependencies": {},
  "readme": "# Stripe Node.js Library\n\n[![Version](https://img.shields.io/npm/v/stripe.svg)](https://www.npmjs.org/package/stripe)\n[![Build Status](https://travis-ci.org/stripe/stripe-node.svg?branch=master)](https://travis-ci.org/stripe/stripe-node)\n[![Coverage Status](https://coveralls.io/repos/github/stripe/stripe-node/badge.svg)](https://coveralls.io/github/stripe/stripe-node)\n[![Downloads](https://img.shields.io/npm/dm/stripe.svg)](https://www.npmjs.com/package/stripe)\n[![Try on RunKit](https://badge.runkitcdn.com/stripe.svg)](https://runkit.com/npm/stripe)\n\nThe Stripe Node library provides convenient access to the Stripe API from\napplications written in server-side JavaScript.\n\nPlease keep in mind that this package is for use with server-side Node that\nuses Stripe secret keys. To maintain PCI compliance, tokenization of credit\ncard information should always be done with [Stripe.js][stripe-js] on the\nclient side. This package should not be used for that purpose.\n\n## Documentation\n\nSee the [`stripe-node` API docs](https://stripe.com/docs/api/node#intro) for Node.js.\n\n## Installation\n\nInstall the package with:\n\n```sh\nnpm install stripe --save\n```\n\n## Usage\n\nThe package needs to be configured with your account's secret key which is\navailable in your [Stripe Dashboard][api-keys]. Require it with the key's\nvalue:\n\n```js\nconst stripe = require('stripe')('sk_test_...');\n\nconst customer = await stripe.customers.create({\n  email: 'customer@example.com',\n});\n```\n\nOr using ES modules, this looks more like:\n\n```js\nimport Stripe from 'stripe';\nconst stripe = Stripe('sk_test_...');\n//…\n```\n\nOn older versions of Node, you can use [promises](#using-promises)\nor [callbacks](#using-callbacks) instead of `async`/`await`.\n\n## Initialize with config object\n\nThe package can be initialized with several options:\n\n```js\nimport ProxyAgent from 'https-proxy-agent';\n\nconst stripe = Stripe('sk_test_...', {\n  apiVersion: '2019-08-08',\n  maxNetworkRetries: 1,\n  httpAgent: new ProxyAgent(process.env.http_proxy),\n  timeout: 1000,\n  host: 'api.example.com',\n  port: 123,\n  telemetry: true,\n});\n```\n\n| Option              | Default                       | Description                                                                           |\n| ------------------- | ----------------------------- | ------------------------------------------------------------------------------------- |\n| `apiVersion`        | `null`                        | Stripe API version to be used. If not set the account's default version will be used. |\n| `maxNetworkRetries` | 0                             | The amount of times a request should be [retried](#network-retries).                  |\n| `httpAgent`         | `null`                        | [Proxy](#configuring-a-proxy) agent to be used by the library.                        |\n| `timeout`           | 120000 (Node default timeout) | [Maximum time each request can take in ms.](#configuring-timeout)                     |\n| `host`              | `'api.stripe.com'`            | Host that requests are made to.                                                       |\n| `port`              | 443                           | Port that requests are made to.                                                       |\n| `telemetry`         | `true`                        | Allow Stripe to send latency [telemetry](#request-latency-telemetry)                  |\n\nNote: Both `maxNetworkRetries` and `timeout` can be overridden on a per-request basis. `timeout` can be updated at any time with [`stripe.setTimeout`](#configuring-timeout).\n\n### Usage with TypeScript\n\nStripe does not currently maintain typings for this package, but there are\ncommunity typings available from DefinitelyTyped.\n\nTo install:\n\n```sh\nnpm install --dev @types/stripe\n```\n\nTo use:\n\n```ts\n// Note `* as` and `new Stripe` for TypeScript:\nimport * as Stripe from 'stripe';\nconst stripe = new Stripe('sk_test_...');\n\nconst customer: Promise<\n  Stripe.customers.ICustomer\n> = stripe.customers.create(/* ... */);\n```\n\n### Using Promises\n\nEvery method returns a chainable promise which can be used instead of a regular\ncallback:\n\n```js\n// Create a new customer and then a new charge for that customer:\nstripe.customers\n  .create({\n    email: 'foo-customer@example.com',\n  })\n  .then((customer) => {\n    return stripe.customers.createSource(customer.id, {\n      source: 'tok_visa',\n    });\n  })\n  .then((source) => {\n    return stripe.charges.create({\n      amount: 1600,\n      currency: 'usd',\n      customer: source.customer,\n    });\n  })\n  .then((charge) => {\n    // New charge created on a new customer\n  })\n  .catch((err) => {\n    // Deal with an error\n  });\n```\n\n### Using callbacks\n\nOn versions of Node.js prior to v7.9:\n\n```js\nvar stripe = require('stripe')('sk_test_...');\n\nstripe.customers.create(\n  {\n    email: 'customer@example.com',\n  },\n  function(err, customer) {\n    if (err) {\n      // Deal with an error (will be `null` if no error occurred).\n    }\n\n    // Do something with created customer object\n    console.log(customer.id);\n  }\n);\n```\n\n### Configuring Timeout\n\nRequest timeout is configurable (the default is Node's default of 120 seconds):\n\n```js\nstripe.setTimeout(20000); // in ms (this is 20 seconds)\n```\n\nTimeout can also be set globally via the config object:\n\n```js\nconst stripe = Stripe('sk_test_...', {\n  timeout: 2000,\n});\n```\n\nAnd on a per-request basis:\n\n```js\nstripe.customers.create(\n  {\n    email: 'customer@example.com',\n  },\n  {\n    timeout: 1000,\n  }\n);\n```\n\nIf `timeout` is set globally via the config object, the value set in a per-request basis will be favored.\n\n### Configuring For Connect\n\nA per-request `Stripe-Account` header for use with [Stripe Connect][connect]\ncan be added to any method:\n\n```js\n// Retrieve the balance for a connected account:\nstripe.balance\n  .retrieve({\n    stripeAccount: 'acct_foo',\n  })\n  .then((balance) => {\n    // The balance object for the connected account\n  })\n  .catch((err) => {\n    // Error\n  });\n```\n\n### Configuring a Proxy\n\nAn [https-proxy-agent][https-proxy-agent] can be configured with\n`setHttpAgent`.\n\nTo use stripe behind a proxy you can pass to sdk on initialization:\n\n```js\nif (process.env.http_proxy) {\n  const ProxyAgent = require('https-proxy-agent');\n\n  const stripe = Stripe('sk_test_...', {\n    httpProxy: new ProxyAgent(process.env.http_proxy),\n  });\n}\n```\n\n### Network retries\n\nAutomatic network retries can be enabled with the `maxNetworkRetries` config option.\nThis will retry requests `n` times with exponential backoff if they fail due to an intermittent network problem.\n[Idempotency keys](https://stripe.com/docs/api/idempotent_requests) are added where appropriate to prevent duplication.\n\n```js\nconst stripe = Stripe('sk_test_...', {\n  maxNetworkRetries: 2, // Retry a request twice before giving up\n});\n```\n\nNetwork retries can also be set on a per-request basis:\n\n```js\nstripe.customers.create(\n  {\n    email: 'customer@example.com',\n  },\n  {\n    maxNetworkRetries: 2, // Retry this specific request twice before giving up\n  }\n);\n```\n\n### Examining Responses\n\nSome information about the response which generated a resource is available\nwith the `lastResponse` property:\n\n```js\ncharge.lastResponse.requestId; // see: https://stripe.com/docs/api/request_ids?lang=node\ncharge.lastResponse.statusCode;\n```\n\n### `request` and `response` events\n\nThe Stripe object emits `request` and `response` events. You can use them like this:\n\n```js\nconst stripe = require('stripe')('sk_test_...');\n\nconst onRequest = (request) => {\n  // Do something.\n};\n\n// Add the event handler function:\nstripe.on('request', onRequest);\n\n// Remove the event handler function:\nstripe.off('request', onRequest);\n```\n\n#### `request` object\n\n```js\n{\n  api_version: 'latest',\n  account: 'acct_TEST',              // Only present if provided\n  idempotency_key: 'abc123',         // Only present if provided\n  method: 'POST',\n  path: '/v1/charges',\n  request_start_time: 1565125303932  // Unix timestamp in milliseconds\n}\n```\n\n#### `response` object\n\n```js\n{\n  api_version: 'latest',\n  account: 'acct_TEST',              // Only present if provided\n  idempotency_key: 'abc123',         // Only present if provided\n  method: 'POST',\n  path: '/v1/charges',\n  status: 402,\n  request_id: 'req_Ghc9r26ts73DRf',\n  elapsed: 445                       // Elapsed time in milliseconds\n  request_start_time: 1565125303932  // Unix timestamp in milliseconds\n  request_end_time: 1565125304377    // Unix timestamp in milliseconds\n}\n```\n\n### Webhook signing\n\nStripe can optionally sign the webhook events it sends to your endpoint, allowing you to validate that they were not sent by a third-party. You can read more about it [here](https://stripe.com/docs/webhooks#signatures).\n\nPlease note that you must pass the _raw_ request body, exactly as received from Stripe, to the `constructEvent()` function; this will not work with a parsed (i.e., JSON) request body.\n\nYou can find an example of how to use this with [Express](https://expressjs.com/) in the [`examples/webhook-signing`](examples/webhook-signing) folder, but here's what it looks like:\n\n```js\nconst event = stripe.webhooks.constructEvent(\n  webhookRawBody,\n  webhookStripeSignatureHeader,\n  webhookSecret\n);\n```\n\n#### Testing Webhook signing\n\nYou can use `stripe.webhooks.generateTestHeaderString` to mock webhook events that come from Stripe:\n\n```js\nconst payload = {\n  id: 'evt_test_webhook',\n  object: 'event',\n};\n\nconst payloadString = JSON.stringify(payload, null, 2);\nconst secret = 'whsec_test_secret';\n\nconst header = stripe.webhooks.generateTestHeaderString({\n  payload: payloadString,\n  secret,\n});\n\nconst event = stripe.webhooks.constructEvent(payloadString, header, secret);\n\n// Do something with mocked signed event\nexpect(event.id).to.equal(payload.id);\n```\n\n### Writing a Plugin\n\nIf you're writing a plugin that uses the library, we'd appreciate it if you identified using `stripe.setAppInfo()`:\n\n```js\nstripe.setAppInfo({\n  name: 'MyAwesomePlugin',\n  version: '1.2.34', // Optional\n  url: 'https://myawesomeplugin.info', // Optional\n});\n```\n\nThis information is passed along when the library makes calls to the Stripe API.\n\n### Auto-pagination\n\nAs of stripe-node 6.11.0, you may auto-paginate list methods.\nWe provide a few different APIs for this to aid with a variety of node versions and styles.\n\n#### Async iterators (`for-await-of`)\n\nIf you are in a Node environment that has support for [async iteration](https://github.com/tc39/proposal-async-iteration#the-async-iteration-statement-for-await-of),\nsuch as Node 10+ or [babel](https://babeljs.io/docs/en/babel-plugin-transform-async-generator-functions),\nthe following will auto-paginate:\n\n```js\nfor await (const customer of stripe.customers.list()) {\n  doSomething(customer);\n  if (shouldStop()) {\n    break;\n  }\n}\n```\n\n#### `autoPagingEach`\n\nIf you are in a Node environment that has support for `await`, such as Node 7.9 and greater,\nyou may pass an async function to `.autoPagingEach`:\n\n```js\nawait stripe.customers.list().autoPagingEach(async (customer) => {\n  await doSomething(customer);\n  if (shouldBreak()) {\n    return false;\n  }\n});\nconsole.log('Done iterating.');\n```\n\nEquivalently, without `await`, you may return a Promise, which can resolve to `false` to break:\n\n```js\nstripe.customers\n  .list()\n  .autoPagingEach((customer) => {\n    return doSomething(customer).then(() => {\n      if (shouldBreak()) {\n        return false;\n      }\n    });\n  })\n  .then(() => {\n    console.log('Done iterating.');\n  })\n  .catch(handleError);\n```\n\nIf you prefer callbacks to promises, you may also use a `next` callback and a second `onDone` callback:\n\n```js\nstripe.customers.list().autoPagingEach(\n  function onItem(customer, next) {\n    doSomething(customer, function(err, result) {\n      if (shouldStop(result)) {\n        next(false); // Passing `false` breaks out of the loop.\n      } else {\n        next();\n      }\n    });\n  },\n  function onDone(err) {\n    if (err) {\n      console.error(err);\n    } else {\n      console.log('Done iterating.');\n    }\n  }\n);\n```\n\nIf your `onItem` function does not accept a `next` callback parameter _or_ return a Promise,\nthe return value is used to decide whether to continue (`false` breaks, anything else continues).\n\n#### `autoPagingToArray`\n\nThis is a convenience for cases where you expect the number of items\nto be relatively small; accordingly, you must pass a `limit` option\nto prevent runaway list growth from consuming too much memory.\n\nReturns a promise of an array of all items across pages for a list request.\n\n```js\nconst allNewCustomers = await stripe.customers\n  .list({created: {gt: lastMonth}})\n  .autoPagingToArray({limit: 10000});\n```\n\n### Request latency telemetry\n\nBy default, the library sends request latency telemetry to Stripe. These\nnumbers help Stripe improve the overall latency of its API for all users.\n\nYou can disable this behavior if you prefer:\n\n```js\nstripe.setTelemetryEnabled(false);\n```\n\n## More Information\n\n- [REST API Version](https://github.com/stripe/stripe-node/wiki/REST-API-Version)\n- [Error Handling](https://github.com/stripe/stripe-node/wiki/Error-Handling)\n- [Passing Options](https://github.com/stripe/stripe-node/wiki/Passing-Options)\n- [Using Stripe Connect](https://github.com/stripe/stripe-node/wiki/Using-Stripe-Connect-with-node.js)\n\n## Development\n\nRun all tests:\n\n```bash\n$ yarn install\n$ yarn test\n```\n\nIf you do not have `yarn` installed, you can get it with `npm install --global yarn`.\n\nRun a single test suite without a coverage report:\n\n```bash\n$ yarn mocha-only test/Error.spec.js\n```\n\nRun a single test (case sensitive) in watch mode:\n\n```bash\n$ yarn mocha-only test/Error.spec.js --grep 'Populates with type' --watch\n```\n\nIf you wish, you may run tests using your Stripe _Test_ API key by setting the\nenvironment variable `STRIPE_TEST_API_KEY` before running the tests:\n\n```bash\n$ export STRIPE_TEST_API_KEY='sk_test....'\n$ yarn test\n```\n\nRun prettier:\n\nAdd an [editor integration](https://prettier.io/docs/en/editors.html) or:\n\n```bash\n$ yarn fix\n```\n\n[api-keys]: https://dashboard.stripe.com/account/apikeys\n[connect]: https://stripe.com/connect\n[https-proxy-agent]: https://github.com/TooTallNate/node-https-proxy-agent\n[stripe-js]: https://stripe.com/docs/stripe.js\n\n<!--\n# vim: set tw=79:\n-->\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/stripe/stripe-node.git"
  },
  "scripts": {
    "clean": "rm -rf ./.nyc_output ./node_modules/.cache ./coverage",
    "coveralls": "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
    "fix": "yarn lint --fix",
    "lint": "eslint --ext .js,.jsx .",
    "mocha": "nyc mocha",
    "mocha-only": "mocha",
    "report": "nyc -r text -r lcov report",
    "test": "npm run lint && npm run mocha"
  },
  "version": "7.15.0"
}
